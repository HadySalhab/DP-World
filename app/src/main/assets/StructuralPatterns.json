{
  "design_patterns": [
    {
      "id": 1,
      "title": "Decorator",
      "description": "Attach additional responsibilities to an object dynamically. Provide a flexible alternative to sub-classing for extending functionality.",
      "category": "Structural"
    },
    {
      "id": 2,
      "title": "Composite",
      "description": "Compose objects into tree structures to represent part-whole hierarchies. Lets clients treat individual objects and compositions of objects uniformly.",
      "category": "Structural"
    },
    {
      "id": 3,
      "title": "Facade",
      "description": "Provide a unified interface to a set of interfaces in a subsystem. Defines a highlevel interface that makes the subsystem easier to use.",
      "category": "Structural"
    },
    {
      "id": 4,
      "title": "Proxy",
      "description": "Provide a surrogate or placeholder for another object to control access to it.",
      "category": "Structural"
    },
    {
      "id": 5,
      "title": "Adapter",
      "description": "Convert the interface of a class into another interface clients expect. Lets classes work together that couldn't otherwise because of incompatible interfaces.",
      "category": "Structural"
    }
  ]
}


