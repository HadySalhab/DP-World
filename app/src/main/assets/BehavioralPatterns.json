{
  "design_patterns": [
    {
      "id": 1,
      "title": "Template Method",
      "description": "Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.",
      "category": "Behavioral"
    },
    {
      "id": 2,
      "title": "Iterator",
      "description": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.",
      "category": "Behavioral"
    },
    {
      "id": 3,
      "title": "Observer",
      "description": "Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.",
      "category": "Behavioral"
    },
    {
      "id": 4,
      "title": "Strategy",
      "description": "Define a family of algorithms, encapsulate each one, and make them interchangeable. Lets the algorithm vary independently from clients that use it.",
      "category": "Behavioral"
    },
    {
      "id": 5,
      "title": "State",
      "description": "Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.",
      "category": "Behavioral"
    }
  ]
}


